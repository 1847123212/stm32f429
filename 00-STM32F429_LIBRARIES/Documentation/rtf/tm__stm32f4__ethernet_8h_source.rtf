{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 9;}
{\s50\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext51 List Continue 0;}
{\s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext52 List Continue 1;}
{\s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext53 List Continue 2;}
{\s53\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext54 List Continue 3;}
{\s54\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext55 List Continue 4;}
{\s55\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext56 List Continue 5;}
{\s56\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext57 List Continue 6;}
{\s57\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext58 List Continue 7;}
{\s58\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 8;}
{\s59\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 9;}
{\s60\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext61 DescContinue 0;}
{\s61\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext62 DescContinue 1;}
{\s62\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext63 DescContinue 2;}
{\s63\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext64 DescContinue 3;}
{\s64\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext65 DescContinue 4;}
{\s65\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext66 DescContinue 5;}
{\s66\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext67 DescContinue 6;}
{\s67\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext68 DescContinue 7;}
{\s68\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 8;}
{\s69\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 9;}
{\s70\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext81 LatexTOC 0;}
{\s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext82 LatexTOC 1;}
{\s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext83 LatexTOC 2;}
{\s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext84 LatexTOC 3;}
{\s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext85 LatexTOC 4;}
{\s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext86 LatexTOC 5;}
{\s76\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext87 LatexTOC 6;}
{\s77\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext88 LatexTOC 7;}
{\s78\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 8;}
{\s79\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 9;}
{\s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext81 \sautoupd List Bullet 0;}
{\s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid \sbasedon0 \snext82 \sautoupd List Bullet 1;}
{\s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid \sbasedon0 \snext83 \sautoupd List Bullet 2;}
{\s83\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls4\adjustright \fs20\cgrid \sbasedon0 \snext84 \sautoupd List Bullet 3;}
{\s84\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls5\adjustright \fs20\cgrid \sbasedon0 \snext85 \sautoupd List Bullet 4;}
{\s85\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls6\adjustright \fs20\cgrid \sbasedon0 \snext86 \sautoupd List Bullet 5;}
{\s86\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls7\adjustright \fs20\cgrid \sbasedon0 \snext87 \sautoupd List Bullet 6;}
{\s87\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls8\adjustright \fs20\cgrid \sbasedon0 \snext88 \sautoupd List Bullet 7;}
{\s88\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls9\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 8;}
{\s89\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls10\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 9;}
{\s90\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext91 \sautoupd List Enum 0;}
{\s91\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext92 \sautoupd List Enum 1;}
{\s92\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext93 \sautoupd List Enum 2;}
{\s93\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext94 \sautoupd List Enum 3;}
{\s94\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext95 \sautoupd List Enum 4;}
{\s95\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s96\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s97\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext98 \sautoupd List Enum 7;}
{\s98\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 8;}
{\s99\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 9;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
tm_stm32f4_ethernet.h\par \pard\plain 
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     1 \par
   75 #ifndef TM_ETHERNET_H\par
   76 #define TM_ETHERNET_H 100\par
   77 \par
   78 /* C++ detection */\par
   79 #ifdef __cplusplus\par
   80 extern C \{\par
   81 #endif\par
   82 \par
   98 #include "stm32f4xx.h"\par
   99 #include "stm32f4xx_rcc.h"\par
  100 #include "stm32f4xx_gpio.h"\par
  101 #include "defines.h"\par
  102 #include "attributes.h"\par
  103 #include "tm_stm32f4_delay.h"\par
  104 #include "tm_stm32f4_gpio.h"\par
  105 \par
  106 /* Ethernet based includes */\par
  107 #include "stm32f4x7_eth.h"\par
  108 #include "stm32f4x7_eth_bsp.h"\par
  109 #include "netconf.h"\par
  110 #include "tcp_echoclient.h"\par
  111 #include "lwip/ip_addr.h"\par
  112 #include "lwip/dns.h"\par
  113 #include "lwip/tcp.h"\par
  114 \par
  115 /* C based includes */\par
  116 #include "string.h"\par
  117 #include "stdio.h"\par
  118 \par
  119 /* Ethernet PHY used in your project */\par
  120 /* Default value is DP83848 */\par
  121 #ifndef ETHERNET_PHY\par
  122 #define ETHERNET_PHY                        0\par
  123 #endif\par
  124 \par
  125 /* Check for link status every 1000ms */\par
  126 #ifndef LINK_TIMER_INTERVAL\par
  127 #define LINK_TIMER_INTERVAL                 1000\par
  128 #endif\par
  129 \par
  130 /* Default server PORT used */\par
  131 #ifndef ETHERNET_SERVER_PORT\par
  132 #define ETHERNET_SERVER_PORT                80\par
  133 #endif\par
  134 \par
  135 /* Include server based options */\par
  136 #include "httpd.h"\par
  137 #include "fs.h"\par
  138 \par
  139 /* MAC ADDRESS: MAC_ADDR0:MAC_ADDR1:MAC_ADDR2:MAC_ADDR3:MAC_ADDR4:MAC_ADDR5 */\par
  140 /* In case you want to use custom MAC, use parameter in init function */\par
  141 #ifndef MAC_ADDR0\par
  142 #define MAC_ADDR0                           0x06\par
  143 #define MAC_ADDR1                           0x05\par
  144 #define MAC_ADDR2                           0x04\par
  145 #define MAC_ADDR3                           0x03\par
  146 #define MAC_ADDR4                           0x02\par
  147 #define MAC_ADDR5                           0x01\par
  148 #endif\par
  149 \par
  150 /* Static IP ADDRESS: IP_ADDR0.IP_ADDR1.IP_ADDR2.IP_ADDR3 */\par
  151 /* Used in case DHCP is not used or response failed */\par
  152 /* In case you want to use custom IP, use parameter in init function */\par
  153 #ifndef IP_ADDR0\par
  154 #define IP_ADDR0                            192\par
  155 #define IP_ADDR1                            168\par
  156 #define IP_ADDR2                            0\par
  157 #define IP_ADDR3                            120\par
  158 #endif\par
  159 \par
  160 /* NETMASK */\par
  161 /* In case you want to use custom netmask, use parameter in init function */\par
  162 #ifndef NETMASK_ADDR0\par
  163 #define NETMASK_ADDR0                       255\par
  164 #define NETMASK_ADDR1                       255\par
  165 #define NETMASK_ADDR2                       255\par
  166 #define NETMASK_ADDR3                       0\par
  167 #endif\par
  168 \par
  169 /* Gateway Address */\par
  170 /* In case you want to use custom gateway, use parameter in init function */\par
  171 #ifndef GW_ADDR0\par
  172 #define GW_ADDR0                            192\par
  173 #define GW_ADDR1                            168\par
  174 #define GW_ADDR2                            0\par
  175 #define GW_ADDR3                            1\par
  176 #endif\par
  177 \par
  178 /* Device name which will be seen in router when requesting IP via DHCP */\par
  179 #ifndef ETHERNET_HOSTNAME_DHCP\par
  180 #define ETHERNET_HOSTNAME_DHCP              "TM-ETH-Device"\par
  181 #endif\par
  182 \par
  183 /* RMII mode by default */\par
  184 #if !defined(ETHERNET_MII_MODE) && !defined(ETHERNET_RMII_MODE)\par
  185     #define ETHERNET_RMII_MODE\par
  186 #endif\par
  187 \par
  188 /* Buffer size for ethernet headers when requesting as client */\par
  189 /* Used for headers after you are connected to server, HTTP headers */\par
  190 /* Ex: GET / HTTP/1.1\\r\\n...etc */\par
  191 #ifndef ETHERNET_MAX_HEADER_SIZE\par
  192 #define ETHERNET_MAX_HEADER_SIZE            1024\par
  193 #endif\par
  194 \par
  195 /* Max connection string name when connection as client */\par
  196 /* This is also max domain name when using DNS request */\par
  197 #ifndef ETHERNET_MAX_CONNECTION_NAME\par
  198 #define ETHERNET_MAX_CONNECTION_NAME        100\par
  199 #endif\par
  200 \par
  201 /* Maximal number of opened files at a time as server */\par
  202 #ifndef ETHERNET_MAX_OPEN_FILES\par
  203 #define ETHERNET_MAX_OPEN_FILES             10\par
  204 #endif\par
  205 \par
  206 /* Maximal length for SSI tag used in HTML */\par
  207 #ifndef ETHERNET_SSI_MAX_TAG_LEN\par
  208 #define ETHERNET_SSI_MAX_TAG_LEN            32\par
  209 #endif\par
  210 \par
  211 /* Maximal buffer length for SSI tag insert text */\par
  212 /* Content of buffer will be replaced with SSI tag */\par
  213 #ifndef ETHERNET_SSI_MAX_TAG_INSERT_LEN\par
  214 #define ETHERNET_SSI_MAX_TAG_INSERT_LEN     512\par
  215 #endif\par
  216 \par
  217 /* Internal struct which should not be used by user */\par
  218 typedef struct \{\par
  219     uint8_t ip_addr[4];\par
  220     uint8_t mac_addr[6];\par
  221     uint8_t netmask[4];\par
  222     uint8_t gateway[4];\par
  223     uint8_t staticip;\par
  224     uint8_t ip_is_set;\par
  225     uint8_t link_is_up;\par
  226     uint32_t ClientSuccessfullConnections, ClientConnections;\par
  227     uint64_t Client_TX_Bytes, Client_RX_Bytes;\par
  228     uint32_t Server_Connections;\par
  229     uint64_t Server_TX_Bytes, Server_RX_Bytes;\par
  230     uint8_t server_active;\par
  231     uint16_t server_port;\par
  232     uint8_t speed_100m;\par
  233     uint8_t full_duplex;\par
  234 \} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAL" }{}}{\fldrslt {\cs37\ul\cf2 TM_ETHERNET_t}}}
;\par
  235 extern {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAL" }{}}{\fldrslt {\cs37\ul\cf2 TM_ETHERNET_t}}}
 TM_ETHERNET;\par
  236 \par
  237 /* Client protocol states */\par
  238 /* For private use */\par
  239 typedef enum  \{\par
  240     CLIENT_NOT_CONNECTED = 0,\par
  241     CLIENT_CONNECTED,\par
  242     CLIENT_RECEIVED,\par
  243     CLIENT_CLOSING,\par
  244 \} client_states;\par
  245 \par
  271 typedef struct \{\par
  272     char name[ETHERNET_MAX_CONNECTION_NAME];\par
  273     uint8_t active;\par
  274     uint8_t ip_addr[4];\par
  275     uint16_t port;\par
  276     uint8_t headers_done;\par
  277     uint8_t* active_connections_count;\par
  278     void* user_parameters;\par
  279     /* Private use */\par
  280     struct tcp_pcb* pcb;\par
  281     client_states state;\par
  282     struct pbuf *p_tx;\par
  283 \} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 TM_TCPCLIENT_t}}}
;\par
  284 \par
  308 typedef struct \{\par
  309     void* connection;\par
  310     const char* uri;\par
  311     const char* http_request;\par
  312     uint16_t http_request_len;\par
  313     int content_len;\par
  314     char* response_uri;\par
  315     uint16_t response_uri_len;\par
  316 \} {\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 TM_ETHERNETPOST_t}}}
;\par
  317 \par
  335 typedef enum \{\par
  336     TM_ETHERNET_Result_Ok = 0,\par
  337     TM_ETHERNET_Result_Error,\par
  338     TM_ETHERNET_Result_IPIsNotSetYet,\par
  339     TM_ETHERNET_Result_LinkIsDown,\par
  340     TM_ETHERNET_Result_NeedHardReset,\par
  341     TM_ETHERNET_Result_LibraryNotInitialized\par
  342 \} TM_ETHERNET_Result_t;\par
  343 \par
  344 /* Additional typedefs */\par
  345 /* User friendly typedef for SSI tags */\par
  346 typedef const char * TM_ETHERNET_SSI_t;\par
  347 /* User friendly typedef for CGI tags */\par
  362 typedef tCGI TM_ETHERNET_CGI_t;\par
  363 \par
  364 /* Ethernet */\par
  393 extern TM_ETHERNET_Result_t TM_ETHERNET_Init(uint8_t* mac_addr, uint8_t* ip_addr, uint8_t* gateway, uint8_t* netmask);\par
  394 \par
  402 extern TM_ETHERNET_Result_t TM_ETHERNET_Update(void);\par
  403 \par
  414 extern TM_ETHERNET_Result_t TM_ETHERNET_TimeUpdate(uint16_t millis);\par
  415 \par
  423 extern TM_ETHERNET_Result_t TM_ETHERNET_TestReady(void);\par
  424 \par
  430 #define TM_ETHERNET_IsIPStatic()            (TM_ETHERNET.staticip)\par
  431 \par
  437 #define TM_ETHERNET_Is100M()                (TM_ETHERNET.speed_100m)\par
  438 \par
  444 #define TM_ETHERNET_IsFullDuplex()          (TM_ETHERNET.full_duplex)\par
  445 \par
  455 #define TM_ETHERNET_GetLocalIP(x)           (((x) >= 0 && (x) < 4) ? TM_ETHERNET.ip_addr[(x)] : 0)\par
  456 \par
  466 #define TM_ETHERNET_GetMACAddr(x)           (((x) >= 0 && (x) < 6) ? TM_ETHERNET.mac_addr[(x)] : 0)\par
  467 \par
  477 #define TM_ETHERNET_GetGateway(x)           (((x) >= 0 && (x) < 4) ? TM_ETHERNET.gateway[(x)] : 0)\par
  478 \par
  488 #define TM_ETHERNET_GetNetmask(x)           (((x) >= 0 && (x) < 4) ? TM_ETHERNET.netmask[(x)] : 0)\par
  489 \par
  490 /* Server based functions */\par
  504 extern TM_ETHERNET_Result_t TM_ETHERNETSERVER_Enable(uint16_t server_port);\par
  505 \par
  511 extern TM_ETHERNET_Result_t TM_ETHERNETSERVER_Disable(void);\par
  512 \par
  518 #define TM_ETHERNETSERVER_Enabled()             (TM_ETHERNET.server_active)\par
  519 \par
  525 #define TM_ETHERNETSERVER_GetPortNumber()       (TM_ETHERNET.server_port)\par
  526 \par
  532 #define TM_ETHERNETSERVER_GetTXBytes()          (TM_ETHERNET.Server_TX_Bytes)\par
  533 \par
  539 #define TM_ETHERNETSERVER_GetRXBytes()          (TM_ETHERNET.Server_RX_Bytes)\par
  540 \par
  546 #define TM_ETHERNETSERVER_GetConnectionsCount() (TM_ETHERNET.Server_Connections)\par
  547 \par
  566 extern TM_ETHERNET_Result_t TM_ETHERNETSERVER_SetSSITags(TM_ETHERNET_SSI_t* tags, uint16_t number_of_tags);\par
  567 \par
  588 extern TM_ETHERNET_Result_t TM_ETHERNETSERVER_SetCGIHandlers(const TM_ETHERNET_CGI_t* cgis, uint16_t number_of_handlers);\par
  589 \par
  590 /* Client based functions */\par
  613 extern TM_ETHERNET_Result_t TM_ETHERNETCLIENT_Connect(char* conn_name, uint8_t ip1, uint8_t ip2, uint8_t ip3, uint8_t ip4, uint16_t port, void* user_parameters);\par
  614 \par
  620 #define TM_ETHERNETCLIENT_GetTXBytes()                      (TM_ETHERNET.Client_TX_Bytes)\par
  621 \par
  627 #define TM_ETHERNETCLIENT_GetRXBytes()                      (TM_ETHERNET.Client_RX_Bytes)\par
  628 \par
  634 #define TM_ETHERNETCLIENT_GetConnectionsCount()             (TM_ETHERNET.ClientConnections)\par
  635 \par
  641 #define TM_ETHERNETCLIENT_GetSuccessfullConnectionsCount()  (TM_ETHERNET.ClientSuccessfullConnections)\par
  642 \par
  643 /* DNS */\par
  657 extern TM_ETHERNET_Result_t TM_ETHERNETDNS_GetHostByName(char* host_name);\par
  658 \par
  659 /* Ethernet based callbacks */\par
  680 extern void TM_ETHERNET_IPIsSetCallback(uint8_t ip_addr1, uint8_t ip_addr2, uint8_t ip_addr3, uint8_t ip_addr4, uint8_t dhcp);\par
  681 \par
  691 extern void TM_ETHERNET_DHCPStartCallback(void);\par
  692 \par
  703 extern void TM_ETHERNET_LinkIsDownCallback(void);\par
  704 \par
  715 extern void TM_ETHERNET_LinkIsUpCallback(void);\par
  716 \par
  717 /* System reset callback */\par
  732 extern void TM_ETHERNET_SystemResetCallback(void);\par
  733 \par
  734 /* Ethernet client based callbacks */\par
  735 /* Callbacks for ethernet client */\par
  762 extern uint16_t TM_ETHERNETCLIENT_CreateHeadersCallback({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 TM_TCPCLIENT_t}}}
* connection, char* buffer, uint16_t buffer_length);\par
  763 \par
  784 extern void TM_ETHERNETCLIENT_ReceiveDataCallback({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 TM_TCPCLIENT_t}}}
* connection, uint8_t* buffer, uint16_t buffer_length, uint16_t total_length);\par
  785 \par
  799 extern void TM_ETHERNETCLIENT_ConnectedCallback({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 TM_TCPCLIENT_t}}}
* connection);\par
  800 \par
  818 extern void TM_ETHERNETCLIENT_ConnectionClosedCallback({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 TM_TCPCLIENT_t}}}
* connection, uint8_t success);\par
  819 \par
  834 extern void TM_ETHERNETCLIENT_ErrorCallback({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 TM_TCPCLIENT_t}}}
* connection);\par
  835 \par
  849 extern void TM_ETHERNETCLIENT_ConnectionStartedCallback({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAM" }{}}{\fldrslt {\cs37\ul\cf2 TM_TCPCLIENT_t}}}
* connection);\par
  850 \par
  851 /* DNS based callbacks */\par
  874 extern void TM_ETHERNETDNS_FoundCallback(char* host_name, uint8_t ip_addr1, uint8_t ip_addr2, uint8_t ip_addr3, uint8_t ip_addr4);\par
  875 \par
  890 extern void TM_ETHERNETDNS_ErrorCallback(char* host_name);\par
  891 \par
  892 /* Server based callbacks */\par
  910 extern uint16_t TM_ETHERNETSERVER_SSICallback(int iIndex, char *pcInsert, int iInsertLen);\par
  911 \par
  930 extern uint8_t TM_ETHERNETSERVER_ClientConnectedCallback(struct tcp_pcb *pcb);\par
  931 \par
  939 extern void TM_ETHERNETSERVER_ClientDisconnectedCallback(void);\par
  940 \par
  964 extern int TM_ETHERNETSERVER_OpenFileCallback(struct fs_file* file, const char *name);\par
  965 \par
  979 extern void TM_ETHERNETSERVER_CloseFileCallback(struct fs_file* file);\par
  980 \par
  998 extern int TM_ETHERNETSERVER_ReadFileCallback(struct fs_file* file, char* buffer, int count);\par
  999 \par
 1026 extern uint8_t TM_ETHERNETSERVER_PostRequestBeginCallback({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 TM_ETHERNETPOST_t}}}
* params);\par
 1027 \par
 1049 extern uint8_t TM_ETHERNETSERVER_PostRequestReceiveDataCallback({\field {\*\fldinst { HYPERLINK  \\l "AAAAAAAAAN" }{}}{\fldrslt {\cs37\ul\cf2 TM_ETHERNETPOST_t}}}
* params, struct pbuf* p);\par
 1050 \par
 1071 extern void TM_ETHERNETSERVER_PostRequestEndCallback(void* connection, char* response_uri, u16_t response_uri_len);\par
 1072 \par
 1088 extern void TM_ETHERNETPHY_CustomOptions(uint32_t PHYAddress);\par
 1089 \par
 1099 extern uint8_t TM_ETHERNET_InitPinsCallback(void);\par
 1100 \par
 1101 /* Private functions which should not be called from user */\par
 1102 extern void TM_ETHERNET_INT_CustomOptions(uint32_t PHYAddress);\par
 1103 extern void TM_ETHERNET_INT_SetIPAddress(uint8_t ip_addr1, uint8_t ip_addr2, uint8_t ip_addr3, uint8_t ip_addr4, uint8_t dhcp);\par
 1104 extern void TM_ETHERNET_INT_LinkIsDownCallback(void);\par
 1105 extern void TM_ETHERNET_INT_LinkIsUpCallback(void);\par
 1106 \par
 1107 /* C++ detection */\par
 1108 #ifdef __cplusplus\par
 1109 \}\par
 1110 #endif\par
 1111 \par
 1112 #endif\par
 1113 \par
}
}