.TH "TM_GPIO_Functions" 3 "Wed Mar 18 2015" "Version v1.0.0" "TM STM32F4xx Libraries" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TM_GPIO_Functions \- TM_GPIO_Functions
.PP
GPIO Functions\&.  

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBTM_GPIO_SetPinLow\fP(GPIOx,  GPIO_Pin)   ((GPIOx)->BSRRH = (GPIO_Pin))"
.br
.RI "\fISet pin low\&. \fP"
.ti -1c
.RI "#define \fBTM_GPIO_SetPinHigh\fP(GPIOx,  GPIO_Pin)   ((GPIOx)->BSRRL = (GPIO_Pin))"
.br
.RI "\fISet pin high\&. \fP"
.ti -1c
.RI "#define \fBTM_GPIO_SetPinValue\fP(GPIOx,  GPIO_Pin,  val)   ((val) ? \fBTM_GPIO_SetPinHigh\fP(GPIOx, GPIO_Pin) : \fBTM_GPIO_SetPinLow\fP(GPIOx, GPIO_Pin))"
.br
.RI "\fISet pin value\&. \fP"
.ti -1c
.RI "#define \fBTM_GPIO_TogglePinValue\fP(GPIOx,  GPIO_Pin)   ((GPIOx)->ODR ^= (GPIO_Pin))"
.br
.RI "\fIToggle pin\&. \fP"
.ti -1c
.RI "#define \fBTM_GPIO_SetPortValue\fP(GPIOx,  value)   ((GPIOx)->ODR = (value))"
.br
.RI "\fISet value to entire GPIO PORT\&. \fP"
.ti -1c
.RI "#define \fBTM_GPIO_GetInputPinValue\fP(GPIOx,  GPIO_Pin)   (((GPIOx)->IDR & (GPIO_Pin)) == 0 ? 0 : 1)"
.br
.RI "\fIGet input data bit\&. \fP"
.ti -1c
.RI "#define \fBTM_GPIO_GetOutputPinValue\fP(GPIOx,  GPIO_Pin)   (((GPIOx)->ODR & (GPIO_Pin)) == 0 ? 0 : 1)"
.br
.RI "\fIGet output data bit\&. \fP"
.ti -1c
.RI "#define \fBTM_GPIO_GetPortInputValue\fP(GPIOx)   ((GPIOx)->IDR)"
.br
.RI "\fIGet input value from entire GPIO PORT\&. \fP"
.ti -1c
.RI "#define \fBTM_GPIO_GetPortOutputValue\fP(GPIOx)   ((GPIOx)->ODR)"
.br
.RI "\fIGet output value from entire GPIO PORT\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBTM_GPIO_Init\fP (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, \fBTM_GPIO_Mode_t\fP GPIO_Mode, \fBTM_GPIO_OType_t\fP GPIO_OType, \fBTM_GPIO_PuPd_t\fP GPIO_PuPd, \fBTM_GPIO_Speed_t\fP GPIO_Speed)"
.br
.RI "\fIInitialize GPIO pins(s) \fP"
.ti -1c
.RI "void \fBTM_GPIO_InitAlternate\fP (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, \fBTM_GPIO_OType_t\fP GPIO_OType, \fBTM_GPIO_PuPd_t\fP GPIO_PuPd, \fBTM_GPIO_Speed_t\fP GPIO_Speed, uint8_t Alternate)"
.br
.RI "\fIInitialize GPIO pins(s) as alternate function\&. \fP"
.ti -1c
.RI "void \fBTM_GPIO_DeInit\fP (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)"
.br
.RI "\fIDeinitialize pin(s) \fP"
.ti -1c
.RI "void \fBTM_GPIO_SetPinAsInput\fP (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)"
.br
.RI "\fISet pin as input\&. \fP"
.ti -1c
.RI "void \fBTM_GPIO_SetPinAsOutput\fP (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)"
.br
.RI "\fISet pin as output\&. \fP"
.ti -1c
.RI "uint16_t \fBTM_GPIO_GetPortSource\fP (GPIO_TypeDef *GPIOx)"
.br
.RI "\fIGet port source from desired GPIOx PORT\&. \fP"
.ti -1c
.RI "uint16_t \fBTM_GPIO_GetPinSource\fP (uint16_t GPIO_Pin)"
.br
.RI "\fIGet pin source from desired GPIO pin\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
GPIO Functions\&. 

TM_GPIO_Typedefs 
.SH "Macro Definition Documentation"
.PP 
.SS "#define TM_GPIO_GetInputPinValue(GPIOx, GPIO_Pin)   (((GPIOx)->IDR & (GPIO_Pin)) == 0 ? 0 : 1)"

.PP
Get input data bit\&. 
.PP
\fBNote:\fP
.RS 4
Defined as macro to get maximum speed using register access 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIOx\fP GPIOx PORT where you want to read input bit value 
.br
\fIGPIO_Pin\fP GPIO pin where you want to read value 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP in case pin is high, or 0 if low 
.RE
.PP

.SS "#define TM_GPIO_GetOutputPinValue(GPIOx, GPIO_Pin)   (((GPIOx)->ODR & (GPIO_Pin)) == 0 ? 0 : 1)"

.PP
Get output data bit\&. 
.PP
\fBNote:\fP
.RS 4
Defined as macro to get maximum speed using register access 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIOx\fP GPIOx PORT where you want to read output bit value 
.br
\fIGPIO_Pin\fP GPIO pin where you want to read value 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI1\fP in case pin is high, or 0 if low 
.RE
.PP

.SS "#define TM_GPIO_GetPortInputValue(GPIOx)   ((GPIOx)->IDR)"

.PP
Get input value from entire GPIO PORT\&. 
.PP
\fBNote:\fP
.RS 4
Defined as macro to get maximum speed using register access 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIOx\fP GPIOx PORT where you want to read input data value 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIEntire\fP PORT INPUT register 
.RE
.PP

.SS "#define TM_GPIO_GetPortOutputValue(GPIOx)   ((GPIOx)->ODR)"

.PP
Get output value from entire GPIO PORT\&. 
.PP
\fBNote:\fP
.RS 4
Defined as macro to get maximum speed using register access 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIOx\fP GPIOx PORT where you want to read output data value 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIEntire\fP PORT OUTPUT register 
.RE
.PP

.SS "#define TM_GPIO_SetPinHigh(GPIOx, GPIO_Pin)   ((GPIOx)->BSRRL = (GPIO_Pin))"

.PP
Set pin high\&. 
.PP
\fBNote:\fP
.RS 4
Defined as macro to get maximum speed using register access 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIOx\fP GPIOx PORT where you want to set pin high 
.br
\fIGPIO_Pin\fP Select GPIO pin(s)\&. You can select more pins with | (OR) operator to set them high 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "#define TM_GPIO_SetPinLow(GPIOx, GPIO_Pin)   ((GPIOx)->BSRRH = (GPIO_Pin))"

.PP
Set pin low\&. 
.PP
\fBNote:\fP
.RS 4
Defined as macro to get maximum speed using register access 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIOx\fP GPIOx PORT where you want to set pin low 
.br
\fIGPIO_Pin\fP Select GPIO pin(s)\&. You can select more pins with | (OR) operator to set them low 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "#define TM_GPIO_SetPinValue(GPIOx, GPIO_Pin, val)   ((val) ? \fBTM_GPIO_SetPinHigh\fP(GPIOx, GPIO_Pin) : \fBTM_GPIO_SetPinLow\fP(GPIOx, GPIO_Pin))"

.PP
Set pin value\&. 
.PP
\fBNote:\fP
.RS 4
Defined as macro to get maximum speed using register access 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIOx\fP GPIOx PORT where you want to set pin value 
.br
\fIGPIO_Pin\fP Select GPIO pin(s)\&. You can select more pins with | (OR) operator to set them value 
.br
\fIval\fP If parameter is 0 then pin will be low, otherwise high 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "#define TM_GPIO_SetPortValue(GPIOx, value)   ((GPIOx)->ODR = (value))"

.PP
Set value to entire GPIO PORT\&. 
.PP
\fBNote:\fP
.RS 4
Defined as macro to get maximum speed using register access 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIOx\fP GPIOx PORT where you want to set value 
.br
\fIvalue\fP Value for GPIO OUTPUT data 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "#define TM_GPIO_TogglePinValue(GPIOx, GPIO_Pin)   ((GPIOx)->ODR ^= (GPIO_Pin))"

.PP
Toggle pin\&. 
.PP
\fBNote:\fP
.RS 4
Defined as macro to get maximum speed using register access 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIOx\fP GPIOx PORT where you want to toggle pin value 
.br
\fIGPIO_Pin\fP Select GPIO pin(s)\&. You can select more pins with | (OR) operator to toggle them all at a time 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void TM_GPIO_DeInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin)"

.PP
Deinitialize pin(s) 
.PP
\fBNote:\fP
.RS 4
Pins(s) will be set as analog mode to get low power consumption 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIOx\fP GPIOx PORT where you want to set pin as input 
.br
\fIGPIO_Pin\fP Select GPIO pin(s)\&. You can select more pins with | (OR) operator to set them as input 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "uint16_t TM_GPIO_GetPinSource (uint16_t GPIO_Pin)"

.PP
Get pin source from desired GPIO pin\&. 
.PP
\fBNote:\fP
.RS 4
Meant for private use, unless you know what are you doing 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIO_Pin\fP GPIO pin for calculating port source 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fICalculated\fP pin source for GPIO 
.RE
.PP

.SS "uint16_t TM_GPIO_GetPortSource (GPIO_TypeDef * GPIOx)"

.PP
Get port source from desired GPIOx PORT\&. 
.PP
\fBNote:\fP
.RS 4
Meant for private use, unless you know what are you doing 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIOx\fP GPIO PORT for calculating port source 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fICalculated\fP port source for GPIO 
.RE
.PP

.SS "void TM_GPIO_Init (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin, \fBTM_GPIO_Mode_t\fP GPIO_Mode, \fBTM_GPIO_OType_t\fP GPIO_OType, \fBTM_GPIO_PuPd_t\fP GPIO_PuPd, \fBTM_GPIO_Speed_t\fP GPIO_Speed)"

.PP
Initialize GPIO pins(s) 
.PP
\fBNote:\fP
.RS 4
This function also enables clock for GPIO port 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIOx\fP Pointer to GPIOx port you will use for initialization 
.br
\fIGPIO_Pin\fP GPIO pin(s) you will use for initialization 
.br
\fIGPIO_Mode\fP Select GPIO mode\&. This parameter can be a value of \fBTM_GPIO_Mode_t\fP enumeration 
.br
\fIGPIO_OType\fP Select GPIO Output type\&. This parameter can be a value of \fBTM_GPIO_OType_t\fP enumeration 
.br
\fIGPIO_PuPd\fP Select GPIO pull resistor\&. This parameter can be a value of \fBTM_GPIO_PuPd_t\fP enumeration 
.br
\fIGPIO_Speed\fP Select GPIO speed\&. This parameter can be a value of \fBTM_GPIO_Speed_t\fP enumeration 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "void TM_GPIO_InitAlternate (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin, \fBTM_GPIO_OType_t\fP GPIO_OType, \fBTM_GPIO_PuPd_t\fP GPIO_PuPd, \fBTM_GPIO_Speed_t\fP GPIO_Speed, uint8_t Alternate)"

.PP
Initialize GPIO pins(s) as alternate function\&. 
.PP
\fBNote:\fP
.RS 4
This function also enables clock for GPIO port 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIOx\fP Pointer to GPIOx port you will use for initialization 
.br
\fIGPIO_Pin\fP GPIO pin(s) you will use for initialization 
.br
\fIGPIO_OType\fP Select GPIO Output type\&. This parameter can be a value of \fBTM_GPIO_OType_t\fP enumeration 
.br
\fIGPIO_PuPd\fP Select GPIO pull resistor\&. This parameter can be a value of \fBTM_GPIO_PuPd_t\fP enumeration 
.br
\fIGPIO_Speed\fP Select GPIO speed\&. This parameter can be a value of \fBTM_GPIO_Speed_t\fP enumeration 
.br
\fIAlternate\fP Alternate function you will use 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "void TM_GPIO_SetPinAsInput (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin)"

.PP
Set pin as input\&. 
.PP
\fBNote:\fP
.RS 4
Pins HAVE to be initialized first using init function 
.PP
This is just an option for fast input mode 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIOx\fP GPIOx PORT where you want to set pin as input 
.br
\fIGPIO_Pin\fP Select GPIO pin(s)\&. You can select more pins with | (OR) operator to set them as input 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.SS "void TM_GPIO_SetPinAsOutput (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin)"

.PP
Set pin as output\&. 
.PP
\fBNote:\fP
.RS 4
Pins HAVE to be initialized first using init function 
.PP
This is just an option for fast output mode 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIGPIOx\fP GPIOx PORT where you want to set pin as output 
.br
\fIGPIO_Pin\fP Select GPIO pin(s)\&. You can select more pins with | (OR) operator to set them as output 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for TM STM32F4xx Libraries from the source code\&.
